.. Copyright by Kenneth Lee. 2020. All Right Reserved.

计算特性子集
============

综述
----
正如我们在本章开始的时候提到的，计算子系统设计的一个很大的问题是如何平衡空间和
时间的关系。把计算能力分解为多个计算子集提供就是一种平衡的策略。这个策略的思想
是：把所有的计算功能分解为多个子集，软件静态或者动态地决定这些计算子集的使用，
这样虽然不能保证软件一定可以在这些不同目的的实现间互相移植，但可以最大限度地实
现可移植性。

这里说的静态方式，是指软件在编译的时候就决定要使用这个能力，如果目标硬件平台没
有这个能力，这个软件就不能启动，比如基于Neon的软件，在没有实现Neon的硬件上就不
能运行。

而动态方式，是指软件在运行的时候发现被运行的平台是否可以支持某个特定的计算子集
，如果可以才使用这个能力，否则就会退化为使用其他能力。比如鲲鹏的压缩加速器，如
果加速器存在，软件会使用这个硬件加速器进行加速，否则，就会改为使用软件方法进行
压缩。

计算特性子集，可以通过指令集的一个“模块”的方式提供，这一点在RISC-V中表现得最明
显，RISC-V基本上把每个可以独立使用的模块都定义成一种“模块”了，包括乘法，都是独
立于基本指令集的一个模块。这样的好处是可以给硬件设计提供了很大的优化空间，缺点
也很明显，它会让软件非常分裂，难以复用。

鲲鹏920主CPU使用ARMv8的标准，使用一个很大的基本指令集，保证大部分软件互相之间
可以复用，然后再把其他可选功能做成“能力”（Capabilities），尽量使用动态的方式判
断如何把软件投入运行。

增加新的指令集是一种增加计算能力的方法，这种方法我们称为“协处理器方法”，还有一
种方法，我们称为“加速器方法”。两种方法都可以增加指令，区别仅仅是是否把这些指令
作为主处理器的一部分。这一点造成两种模式很大的区别：

如果使用协处理器方法，这个功能需要在CPU保存状态，那么在CPU切换线程的时候，就需
要把这些状态都保存下来。如果对应功能的状态很多，线程切换的成本就会很高。

加速器方法不认为自己是CPU状态的一部分，需要每个进程独占加速器的一个上下文，在
进程释放这个上下文之前，状态都保存在加速器内部，这样线程切换就没有保存上下文的
需要，这个状态留在了加速器的内部。

鲲鹏920提供的加速器不同，当前也没有集成通用计算的加速器，但这是鲲鹏的一个基本
构架策略，基于鲲鹏架构，可以持续增加和改进不同的计算加速器，从而实现计算能力的
持续优化和进步。鲲鹏的计算子系统软硬件设计，是一直围绕着这个策略来的。

主计算核能力
------------
todo:

加速器能力
----------
todo：

.. vim: fo+=mM tw=78
