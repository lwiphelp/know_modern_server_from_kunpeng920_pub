.. Copyright by Kenneth Lee. 2020. All Right Reserved.

综述
====

服务器主要提供三种能力：计算、网络和存储。计算是其中重要一极，而且是软件开发工
程师打交道最多的能力。

计算能力本质是一种信息加工，把一种形态的信息，加工为另一种形态的信息。现代半导
体技术通过空间和时间两个维度上的展开，实现复杂的计算能力。

所谓空间上的展开，是通过组合电路实现的计算的过程，比如下面是一个加法器的示意图
：

todo：去要一张鲲鹏的加法器的电路图。

数字电路电平翻转速度基本上可以认为是光速(todo：需要确定），所以理论上只要布置
足够的电路，就可以完成任何计算。当然，由于工程上有相移等问题的存在，这其实是有
范围限制的，但大体上我们可以认为有这个趋势：通过布置更多的电路，就能完成更多的
计算。这是空间角度的展开。

空间展开的优点是计算速度快，缺点是占用更大的晶元面积，而且如果某个计算过程不是
经常需要，这些面积的利用率不高。

空间展开不足可以通过时间补偿，通过时钟驱动电路把整个计算过程分成多次，就可以完
成更复杂的计算。比如一个32位的加法，可以分解成两次16位加法的组合。对应的面积就
可以小得多。但这样带来的问题也是显而易见的。它的速度受限于时钟频率，速度慢得多
。而时钟频率又受限于电压和加工工艺，不能无限增长。而且更快的频率和需要更高的电
压支持，最终都会反映在计算单元的功耗上。

所有计算子系统的设计都是要平衡时间和空间的关系，而这个时间和空间的关系的设计依
赖于应用的计算类型。所以，几乎没有一种计算单元可以完全满足所有计算的需要。故此
，在服务器设计的时候，设计师们会根据应用的需要，设计不同的计算单元，把不同的计
算分解给不同的计算单元从而满足不同的应用需要。

鲲鹏920SoC内部提供两种类型的计算单元，一种是基于ARMv8的通用计算单元，另一种是
专门针对特定应用的硬件加速器单元。其他的，如果有需要，则可以通过PCIE接口，加入
更多例如TPU，GPU一类的计算单元。

鲲鹏920选择ARMv8作为通用计算单元，有其策略上的考量。一方面是海思和ARM有长期的
合作和使用经验，可以形成组合投资优势。另一方面，ARMv8在现代服务器设计上是有其
他一些明显的优势的。比如说，ARMv8在64位升级上的成功转型。前面说过，布置的功能
越多，占用的面积就越大，所以兼容性，对所有人来说都是痛苦的选择。为了兼容过去的
二进制应用，一些已经没有必要支持的计算单元仍然需要支持，这会增大面积，但对不使
用这些功能的应用，这些多余的面积就是浪费的。所以，同时兼容32位和64位两种指令，
对于任何一方面的应用，无论是32位的，还是64位的，都有部分浪费。ARMv8兼容v7，但
允许不支持v7，而且顺利对生态进行升级，让用户接纳了64位的整个生态。这样整个CPU
设计就可以轻装上阵了。所以大部分基于ARMv8的服务器，包括鲲鹏920，直接就放弃了32
位支持，也放弃了对很多老旧的设计的支持，整体上为它提供更高的性能，更小的面积和
功耗提供了动力，这可以弱化它缺乏服务器历史这个缺点，形成明显的竞争力。

        | ARMv7和v8
        | ARM构架经过多年的发展，形成了很多针对不同场合的Profile和版本，v7和v8
        | 它进入构架化发展的标志。其中v7版本使用32位地址。而v8提供两个模式，
        | Aarch32和Aarch64，Aarch32兼容v7的指令空间，Aarch64的指令空间其实是一
        | 个新的指令空间，只是可以和Aarch32互相切换，互相认知对方对本方寄存器
        | 的修改。ARMv8架构认为Aarch32是可选的特性，让CPU的实现者彻底放弃这部
        | 包袱，专注实现Aarch64需要的的功能。

鲲鹏的通用计算单元基于ARMv8。在很多开发者的眼中，ARM一般用于移动终端，并不能提
供足够高的计算能力。但我们应该注意到，鲲鹏只是使用了这个指令集，并非使用移动终
端的实现，我们可以对比一下同时代的麒麟980和鲲鹏920的大小：

todo：需要一张麒麟和鲲鹏的对比图

两者在流水线深度，内部缓存，计算单元等各个方面，都是完全不同的设计。指令集仅仅
提供了软硬件接口，并不决定两者的应用范围。

.. vim: fo+=mM tw=78
